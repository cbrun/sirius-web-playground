<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" name="Linux Kernel">
  <packagedElement xsi:type="uml:Component" name="Linux Kernel">
    <packagedElement xsi:type="uml:Component" name="Linux Kernel">
      <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel" body="The Linux Kernel is the main component of the Linux operating system. It is responsible for managing system resources, such as the CPU, memory, and input/output devices. It also provides fundamental services such as process management, memory management, and system security. The kernel is the first piece of software loaded into memory during system boot, and it remains in memory throughout the entire lifetime of the system. It acts as a bridge between hardware and software, providing a layer of abstraction that allows applications to interact with the system hardware without needing to understand its low-level details."/>
      <packagedElement xsi:type="uml:Interface" name="System Calls">
        <ownedOperation name="read">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls/read" body="Reads data from a file descriptor"/>
        </ownedOperation>
        <ownedOperation name="write">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls/write" body="Writes data to a file descriptor"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel" supplier="//Linux%20Kernel/Linux%20Kernel/System%20Calls" contract="//Linux%20Kernel/Linux%20Kernel/System%20Calls"/>
      <packagedElement xsi:type="uml:Interface" name="Memory Management">
        <ownedOperation name="malloc">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management/malloc" body="Allocates a block of memory"/>
        </ownedOperation>
        <ownedOperation name="free">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management/free" body="Frees a block of memory"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management"/>
      <packagedElement xsi:type="uml:Interface" name="Process Management">
        <ownedOperation name="fork">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management/fork" body="Creates a new process by duplicating the calling process"/>
        </ownedOperation>
        <ownedOperation name="exec">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management/exec" body="Replaces the current process image with a new process image"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management" contract="//Linux%20Kernel/Linux%20Kernel/Process%20Management"/>
      <packagedElement xsi:type="uml:Component" name="Device Drivers">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" body="The Device Drivers."/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/System%20Calls"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API"/>
        <packagedElement xsi:type="uml:Component" name="Char Device Driver">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver" body="This component allows applications running in user space to access the kernel using character devices. It provides a standardized interface for user space applications to interact with the kernel for certain hardware devices such as serial ports, sound cards, and printers. The Char Device Driver handles device-specific operations such as read and write operations and provides data buffers to communicate data between the device and the user space applications."/>
          <packagedElement xsi:type="uml:Interface" name="Character Device Drivers API">
            <ownedOperation name="register_chrdev">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API/register_chrdev" body="Registers a character driver with the system"/>
            </ownedOperation>
            <ownedOperation name="cdev_add">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API/cdev_add" body="Adds a character device to the system"/>
            </ownedOperation>
            <ownedOperation name="cdev_del">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API/cdev_del" body="Removes a registered character device from the system"/>
            </ownedOperation>
            <ownedOperation name="file_operations">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API/file_operations" body="Structure of functions that define the behavior of the device driver"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Char%20Device%20Driver/Character%20Device%20Drivers%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Block Device Driver">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" body="A block device driver is responsible for managing the communication between the operating system and block devices such as hard drives or USB drives. It provides an interface for reading and writing data to the storage device."/>
          <packagedElement xsi:type="uml:Interface" name="Block Device Interface">
            <ownedOperation name="blk_init_queue">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/Block%20Device%20Interface/blk_init_queue" body="Initializes and returns a request queue for a given set of request_mode and a limit on the number of requests"/>
            </ownedOperation>
            <ownedOperation name="blk_fetch_request">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/Block%20Device%20Interface/blk_fetch_request" body="Fetches the next request from a request queue"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/Block%20Device%20Interface" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/Block%20Device%20Interface"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API"/>
          <packagedElement xsi:type="uml:Component" name="IO Schedulers">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers" body="The IO scheduler is responsible for scheduling requests to access block devices such as hard disks."/>
            <packagedElement xsi:type="uml:Interface" name="IO Scheduler API">
              <ownedOperation name="insert_request">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers/IO%20Scheduler%20API/insert_request" body="Inserts a request into the scheduler queue."/>
              </ownedOperation>
              <ownedOperation name="dispatch_request">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers/IO%20Scheduler%20API/dispatch_request" body="Dispatches a request from the scheduler queue to the device driver."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers/IO%20Scheduler%20API" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers/IO%20Scheduler%20API"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/IO%20Schedulers/IO%20Scheduler%20API"/>
          <packagedElement xsi:type="uml:Component" name="RAID">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID" body="RAID (Redundant Array of Inexpensive Disks) is a technology that combines multiple physical disk drives into a single unit for the purpose of data redundancy, performance improvement, or both. The RAID component provides support for different RAID levels and manages the storage arrays."/>
            <packagedElement xsi:type="uml:Interface" name="Block I/O Layer">
              <ownedOperation name="raid_make_request">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/Block%20I%2FO%20Layer/raid_make_request" body="This function is used for handling requests from the file system and passes them to the RAID layer."/>
              </ownedOperation>
              <ownedOperation name="raid_end_bio_io">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/Block%20I%2FO%20Layer/raid_end_bio_io" body="This function is used for completing I/O operations on RAID arrays."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/Block%20I%2FO%20Layer" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/Block%20I%2FO%20Layer"/>
            <packagedElement xsi:type="uml:Interface" name="RAID Driver Interface">
              <ownedOperation name="md_ioctl">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/RAID%20Driver%20Interface/md_ioctl" body="This function is used for handling IOCTL calls for RAID arrays."/>
              </ownedOperation>
              <ownedOperation name="md_thread">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/RAID%20Driver%20Interface/md_thread" body="This function is used for handling kernel threads for RAID arrays."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/RAID%20Driver%20Interface" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/RAID%20Driver%20Interface"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Block%20Device%20Driver/RAID/Block%20I%2FO%20Layer"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Network Device Driver">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver" body="This component allows the Linux Kernel to communicate with the network devices, such as a network interface card, by managing the data transfer between the devices and the kernel. It is responsible for implementing hardware-specific features necessary to communicate with network devices at a low-level."/>
          <packagedElement xsi:type="uml:Interface" name="Network device driver API">
            <ownedOperation name="netif_rx">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver/Network%20device%20driver%20API/netif_rx" body="Receives an incoming packet, validates it, and passes it to the next layer of the networking stack."/>
            </ownedOperation>
            <ownedOperation name="ndo_start_xmit">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver/Network%20device%20driver%20API/ndo_start_xmit" body="Invoked when a packet needs to be transmitted from the device, responsible for transmitting packets on the device."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver/Network%20device%20driver%20API" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver/Network%20device%20driver%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Network%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Framebuffer Device Driver">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver" body="This component is responsible for controlling the graphic display controller hardware in the kernel. It provides a standard interface for userspace applications to read and write data to the display hardware."/>
          <packagedElement xsi:type="uml:Interface" name="Framebuffer API">
            <ownedOperation name="fb_open">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver/Framebuffer%20API/fb_open" body="Open a framebuffer device and obtain a file descriptor to interact with it"/>
            </ownedOperation>
            <ownedOperation name="fb_release">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver/Framebuffer%20API/fb_release" body="Close the given file descriptor of a framebuffer device"/>
            </ownedOperation>
            <ownedOperation name="fb_ioctl">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver/Framebuffer%20API/fb_ioctl" body="Control or query various options of a framebuffer device"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver/Framebuffer%20API" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers/Framebuffer%20Device%20Driver/Framebuffer%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation/DMA%20Memory%20Allocation%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="IPC (Inter-Process Communication)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)" body="IPCs"/>
        <packagedElement xsi:type="uml:Component" name="Shared Memory">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory" body="A method of inter-process communication (IPC) that allows multiple processes to share a common region of memory that can be used to transfer data between them efficiently. This component provides a way for processes to communicate and share data with each other by mapping the same physical memory pages in their virtual address space."/>
          <packagedElement xsi:type="uml:Interface" name="shmget() and shmctl">
            <ownedOperation name="shmget">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory/shmget()%20and%20shmctl/shmget" body="Creates a shared memory segment."/>
            </ownedOperation>
            <ownedOperation name="shmctl">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory/shmget()%20and%20shmctl/shmctl" body="Performs control operations on the shared memory segment."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory" supplier="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory/shmget()%20and%20shmctl" contract="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Shared%20Memory/shmget()%20and%20shmctl"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Message Queues">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues" body="Message Queues are a mechanism of interprocess communication (IPC) that allows messages (usually in the form of data buffers) to be exchanged between different processes."/>
          <packagedElement xsi:type="uml:Interface" name="System V IPC">
            <ownedOperation name="msgget">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC/msgget" body="Creates a new message queue or returns the ID of an existing one."/>
            </ownedOperation>
            <ownedOperation name="msgsnd">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC/msgsnd" body="Sends a message to a message queue."/>
            </ownedOperation>
            <ownedOperation name="msgrcv">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC/msgrcv" body="Receives a message from a message queue."/>
            </ownedOperation>
            <ownedOperation name="msgctl">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC/msgctl" body="Performs various control operations on a message queue."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues" supplier="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC" contract="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/System%20V%20IPC"/>
          <packagedElement xsi:type="uml:Interface" name="POSIX IPC">
            <ownedOperation name="mq_open">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC/mq_open" body="Opens a message queue or creates one if it doesn't exist."/>
            </ownedOperation>
            <ownedOperation name="mq_send">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC/mq_send" body="Sends a message to a message queue."/>
            </ownedOperation>
            <ownedOperation name="mq_receive">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC/mq_receive" body="Receives a message from a message queue."/>
            </ownedOperation>
            <ownedOperation name="mq_close">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC/mq_close" body="Closes a message queue."/>
            </ownedOperation>
            <ownedOperation name="mq_unlink">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC/mq_unlink" body="Destroys a message queue."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues" supplier="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC" contract="//Linux%20Kernel/Linux%20Kernel/IPC%20(Inter-Process%20Communication)/Message%20Queues/POSIX%20IPC"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="File Systems">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems" body="The File Systems."/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/System%20Calls"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/Virtual%20File%20System%20(VFS)"/>
        <packagedElement xsi:type="uml:Component" name="User Quota">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota" body="The User Quota component in the Linux Kernel is responsible for managing disk space limits set for individual users or user groups. It keeps track of the space consumed by a user or group and enforces the assigned quota limits. It ensures that no user can consume more disk space than assigned to them."/>
          <packagedElement xsi:type="uml:Interface" name="Quota API">
            <ownedOperation name="set_user_quota">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API/set_user_quota" body="Sets the disk space limit for a specific user."/>
            </ownedOperation>
            <ownedOperation name="set_group_quota">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API/set_group_quota" body="Sets the disk space limit for a specific user group."/>
            </ownedOperation>
            <ownedOperation name="get_user_quota">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API/get_user_quota" body="Retrieves the disk space limit set for a specific user."/>
            </ownedOperation>
            <ownedOperation name="get_group_quota">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API/get_group_quota" body="Retrieves the disk space limit set for a specific user group."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/User%20Quota/Quota%20API"/>
        <packagedElement xsi:type="uml:Component" name="Log-Structured File System (LFS)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)" body="A file system that uses a log-like structure to store data, with performance benefits for both reads and writes, especially when dealing with large files and large changes to files."/>
          <packagedElement xsi:type="uml:Interface" name="LFS API">
            <ownedOperation name="lfs_read">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API/lfs_read" body="Reads data from the LFS"/>
            </ownedOperation>
            <ownedOperation name="lfs_write">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API/lfs_write" body="Writes data to the LFS"/>
            </ownedOperation>
            <ownedOperation name="lfs_allocate">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API/lfs_allocate" body="Allocates space on the LFS"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Log-Structured%20File%20System%20(LFS)/LFS%20API"/>
        <packagedElement xsi:type="uml:Component" name="Network File System (NFS)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)" body="NFS is a distributed file system protocol that allows remote access to files over a network similar to local access."/>
          <packagedElement xsi:type="uml:Interface" name="NFS API">
            <ownedOperation name="nfs_create_rpc_client">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API/nfs_create_rpc_client" body="Creates an RPC client for NFS."/>
            </ownedOperation>
            <ownedOperation name="nfs_initiate_read">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API/nfs_initiate_read" body="Initiates a read operation for an NFS file."/>
            </ownedOperation>
            <ownedOperation name="nfs_initiate_write">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API/nfs_initiate_write" body="Initiates a write operation for an NFS file."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API"/>
          <packagedElement xsi:type="uml:Component" name="Server Message Block (SMB)">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)" body="SMB is a network protocol used for sharing files, printers, and other resources between nodes on a network. It provides authentication and authorization for access to shared resources, as well as file and print sharing functionalities."/>
            <packagedElement xsi:type="uml:Interface" name="SMB Protocol API">
              <ownedOperation name="SMB_Create">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API/SMB_Create" body="Creates a new file or directory on the SMB server"/>
              </ownedOperation>
              <ownedOperation name="SMB_Read">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API/SMB_Read" body="Reads data from a file on the SMB server"/>
              </ownedOperation>
              <ownedOperation name="SMB_Write">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API/SMB_Write" body="Writes data to a file on the SMB server"/>
              </ownedOperation>
              <ownedOperation name="SMB_Delete">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API/SMB_Delete" body="Deletes a file or directory from the SMB server"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/Server%20Message%20Block%20(SMB)/SMB%20Protocol%20API"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="UEFI">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/UEFI" body="UEFI"/>
        <packagedElement xsi:type="uml:Component" name="Simple Firmware Interface (SFI)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)" body="SFI is an interface between firmware, which specifies system-specific properties that are necessary for operating system loads, and the operating system or its bootloader."/>
          <packagedElement xsi:type="uml:Interface" name="SFI Interface">
            <ownedOperation name="sfi_probe">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)/SFI%20Interface/sfi_probe" body="Used to identify the signature to verify the table, calculate table length and checksum."/>
            </ownedOperation>
            <ownedOperation name="sfi_parse">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)/SFI%20Interface/sfi_parse" body="Used to parse the SFI tables and populate the global platform variables."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)" supplier="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)/SFI%20Interface" contract="//Linux%20Kernel/Linux%20Kernel/UEFI/Simple%20Firmware%20Interface%20(SFI)/SFI%20Interface"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Process Management">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" body="Responsible for managing processes and threads including their scheduling, creation and termination."/>
        <packagedElement xsi:type="uml:Interface" name="Process Management API">
          <ownedOperation name="fork">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API/fork" body="Creates a new process by duplicating the calling process."/>
          </ownedOperation>
          <ownedOperation name="exec">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API/exec" body="Replaces the current process image with a new process image specified by a file."/>
          </ownedOperation>
          <ownedOperation name="wait">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API/wait" body="Blocks the calling process until one of its child processes terminates."/>
          </ownedOperation>
          <ownedOperation name="exit">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API/exit" body="Terminates the calling process."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API" contract="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API"/>
        <packagedElement xsi:type="uml:Component" name="Job Control">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control" body="Job Control is a subsystem within the Linux Kernel that manages the grouping and execution of multiple processes. It enables various operations on groups of processes such as pausing, resuming, terminating, and prioritizing."/>
          <packagedElement xsi:type="uml:Interface" name="Job Control API">
            <ownedOperation name="waitpid">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control/Job%20Control%20API/waitpid" body="Waits for a specific child process to change state and returns information about that child process."/>
            </ownedOperation>
            <ownedOperation name="kill">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control/Job%20Control%20API/kill" body="Sends a signal to a specified process or group of processes."/>
            </ownedOperation>
            <ownedOperation name="nice">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control/Job%20Control%20API/nice" body="Modifies the priority level of a specified process."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control/Job%20Control%20API" contract="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Job%20Control/Job%20Control%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/POSIX%20APIs"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/Signal%20APIs"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Virtual file system">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system" body="The virtual file system is an abstraction layer that provides a consistent view of the file system regardless of the underlying physical file system type. It allows the kernel to access different types of file systems in a uniform way, making it easier to integrate new file system types."/>
        <packagedElement xsi:type="uml:Interface" name="VFS API">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API/open" body="Opens a file and returns a file descriptor"/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API/read" body="Reads data from a file"/>
          </ownedOperation>
          <ownedOperation name="write">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API/write" body="Writes data to a file"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system" supplier="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Synchronization primitives">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives" body="This component provides synchronization mechanisms to protect shared resources and prevent concurrent access that could lead to data inconsistencies or race conditions. It includes various types of locks, semaphores, mutexes, spinlocks, and atomic operations."/>
        <packagedElement xsi:type="uml:Interface" name="Spinlock API">
          <ownedOperation name="spin_lock">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Spinlock%20API/spin_lock" body="Acquires a spinlock"/>
          </ownedOperation>
          <ownedOperation name="spin_unlock">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Spinlock%20API/spin_unlock" body="Releases a spinlock"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives" supplier="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Spinlock%20API" contract="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Spinlock%20API"/>
        <packagedElement xsi:type="uml:Interface" name="Mutex API">
          <ownedOperation name="mutex_lock">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Mutex%20API/mutex_lock" body="Acquires a mutex"/>
          </ownedOperation>
          <ownedOperation name="mutex_unlock">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Mutex%20API/mutex_unlock" body="Releases a mutex"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives" supplier="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Mutex%20API" contract="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Mutex%20API"/>
        <packagedElement xsi:type="uml:Interface" name="Semaphore API">
          <ownedOperation name="down">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Semaphore%20API/down" body="Decrements a counter and waits if it reaches zero"/>
          </ownedOperation>
          <ownedOperation name="up">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Semaphore%20API/up" body="Increments a counter and wakes up waiting processes if any"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives" supplier="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Semaphore%20API" contract="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Semaphore%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="System Calls">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1" body="System Calls provide a way for user space applications to interact with the kernel. They are interfaces used by user space applications to request services or resources from the kernel, such as creating a new process or reading from a file."/>
        <packagedElement xsi:type="uml:Interface" name="System Call API">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/open" body="Open a file for reading or writing"/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/read" body="Read data from an open file"/>
          </ownedOperation>
          <ownedOperation name="write">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/write" body="Write data to an open file"/>
          </ownedOperation>
          <ownedOperation name="close">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/close" body="Close an open file"/>
          </ownedOperation>
          <ownedOperation name="fork">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/fork" body="Create a new process by duplicating the calling process"/>
          </ownedOperation>
          <ownedOperation name="execve">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API/execve" body="Execute a new program within the current process"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1" supplier="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API" contract="//Linux%20Kernel/Linux%20Kernel/System%20Calls.1/System%20Call%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Memory Management">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" body="Manages memory allocation and deallocation for the kernel and user-space programs. It uses virtual memory to map physical memory and swapping to manage the use of RAM."/>
        <packagedElement xsi:type="uml:Interface" name="Virtual Memory Manager">
          <ownedOperation name="vmalloc">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager/vmalloc" body="Allocates a contiguous block of kernel virtual memory."/>
          </ownedOperation>
          <ownedOperation name="kmalloc">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager/kmalloc" body="Allocates a specific size of kernel memory."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager"/>
        <packagedElement xsi:type="uml:Interface" name="Physical Memory Management">
          <ownedOperation name="page_alloc">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management/page_alloc" body="Allocates physical memory pages."/>
          </ownedOperation>
          <ownedOperation name="free_page">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management/free_page" body="Deallocates physical memory pages."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management"/>
        <packagedElement xsi:type="uml:Interface" name="Swapping">
          <ownedOperation name="pageout">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping/pageout" body="Moves less frequently used memory pages to disk."/>
          </ownedOperation>
          <ownedOperation name="pagein">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping/pagein" body="Brings swapped memory pages back into physical memory."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management"/>
        <packagedElement xsi:type="uml:Component" name="Virtual Memory Manager">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" body="A virtual memory area (VMA) is a contiguous area of virtual memory that provides a way for the Linux Kernel to manage a process's memory space. It is used to track the state and memory mapping of each region of a process's virtual address space, and contains information about the permissions and behavior of the mapped memory."/>
          <packagedElement xsi:type="uml:Interface" name="VMA Management">
            <ownedOperation name="vm_area_alloc">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management/vm_area_alloc" body="Allocates a new VMA and initializes it with the provided memory attributes."/>
            </ownedOperation>
            <ownedOperation name="vm_area_free">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management/vm_area_free" body="Frees a previously allocated VMA."/>
            </ownedOperation>
            <ownedOperation name="split_vma">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management/split_vma" body="Splits a VMA at a specified address, creating two separate VMAs."/>
            </ownedOperation>
            <ownedOperation name="merge">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management/merge" body="Merges two contiguous VMAs into one."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/VMA%20Management"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API"/>
          <packagedElement xsi:type="uml:Component" name="File Backed VMA">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA" body="The File Backed VMA component is responsible for mapping file contents into virtual memory areas. It manages the data of the associated file and provides virtual access to it. This component interacts with the Page Cache to fetch file data as needed to populate the associated page table entries."/>
            <packagedElement xsi:type="uml:Interface" name="VMA Operations API">
              <ownedOperation name="vma_op_split_file">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API/vma_op_split_file" body="Function to split a file-backed VMA."/>
              </ownedOperation>
              <ownedOperation name="vma_op_merge_file">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API/vma_op_merge_file" body="Function to merge adjacent file-backed VMAs."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API"/>
            <packagedElement xsi:type="uml:Interface" name="File Operations API">
              <ownedOperation name="file_op_read">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/File%20Operations%20API/file_op_read" body="Function to read file contents into virtual memory."/>
              </ownedOperation>
              <ownedOperation name="file_op_write">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/File%20Operations%20API/file_op_write" body="Function to write virtual memory contents to a file."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/File%20Operations%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/File%20Operations%20API"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/File%20Operations%20API"/>
          <packagedElement xsi:type="uml:Component" name="Anonymous VMA">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA" body="The Anonymous VMA (Virtual Memory Area) component provides a virtual memory area that stores anonymous memory segments. This type of memory does not have a backing file in the file system and may be used for various purposes, such as process stacks, shared memory, or anonymous memory for dynamic libraries."/>
            <packagedElement xsi:type="uml:Interface" name="Anonymous Memory API">
              <ownedOperation name="anon_vma_clone">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA/Anonymous%20Memory%20API/anon_vma_clone" body="Creates a copy of the Anonymous VMA."/>
              </ownedOperation>
              <ownedOperation name="anon_vma_prepare">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA/Anonymous%20Memory%20API/anon_vma_prepare" body="Initializes and prepares for use a new Anonymous VMA."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA/Anonymous%20Memory%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA/Anonymous%20Memory%20API"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Component" name="Transparent Huge Pages">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages" body="Transparent Huge Pages (THP) is a memory management feature in the Linux Kernel that dynamically and transparently splits and merges memory pages when their size becomes larger than the native page size. THP reduces the overhead of managing memory, and improves the performance of memory-intensive applications."/>
            <packagedElement xsi:type="uml:Interface" name="THP Control API">
              <ownedOperation name="khugepaged">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages/THP%20Control%20API/khugepaged" body="Kernel thread responsible for scanning all user-space process address spaces looking for huge page allocations."/>
              </ownedOperation>
              <ownedOperation name="transparent_hugepage_madvise">
                <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages/THP%20Control%20API/transparent_hugepage_madvise" body="API for enabling and disabling THP and advising the kernel on how to handle faults on huge pages."/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages/THP%20Control%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages/THP%20Control%20API"/>
          </packagedElement>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Transparent%20Huge%20Pages/THP%20Control%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/File%20Backed%20VMA/VMA%20Operations%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager.1/Anonymous%20VMA/Anonymous%20Memory%20API"/>
        <packagedElement xsi:type="uml:Component" name="SLAB and SLUB Memory Allocator">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator" body="The SLAB and SLUB memory allocators are part of the Linux Kernel’s memory manager, which is responsible for managing the storage and allocation of system memory. These components allocate and manage memory objects in the kernel by subdividing system memory into small chunks that can be requested and released on demand by different parts of the kernel. SLAB is considered the legacy allocator for kernel memory, while SLUB is considered the modern replacement for SLAB."/>
          <packagedElement xsi:type="uml:Interface" name="SLAB and SLUB Allocator API">
            <ownedOperation name="kmem_cache_create">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API/kmem_cache_create" body="Creates a new memory cache that can be used to allocate objects of a specified size."/>
            </ownedOperation>
            <ownedOperation name="kmem_cache_alloc">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API/kmem_cache_alloc" body="Allocates a new object from the specified memory cache."/>
            </ownedOperation>
            <ownedOperation name="kmem_cache_free">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API/kmem_cache_free" body="Releases an object back to the specified memory cache."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/SLAB%20and%20SLUB%20Memory%20Allocator/SLAB%20and%20SLUB%20Allocator%20API"/>
        <packagedElement xsi:type="uml:Component" name="Memory Error Detection and Correction">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction" body="Responsible for detecting and correcting errors that occur in memory during system operation."/>
          <packagedElement xsi:type="uml:Interface" name="ECC API">
            <ownedOperation name="ecc_enable">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction/ECC%20API/ecc_enable" body="Enables error-correcting code (ECC) for a given memory region."/>
            </ownedOperation>
            <ownedOperation name="ecc_disable">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction/ECC%20API/ecc_disable" body="Disables error-correcting code (ECC) for a given memory region."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction/ECC%20API" contract="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction/ECC%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Memory%20Error%20Detection%20and%20Correction/ECC%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="I/O Management">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management" body="Manages input/output operations for the entire kernel."/>
        <packagedElement xsi:type="uml:Interface" name="I/O Scheduler">
          <ownedOperation name="add_request">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler/add_request" body="Adds a new I/O request to the scheduler."/>
          </ownedOperation>
          <ownedOperation name="dispatch_request">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler/dispatch_request" body="Dispatches an I/O request to the appropriate device driver."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler" contract="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler"/>
        <packagedElement xsi:type="uml:Interface" name="Block Device I/O">
          <ownedOperation name="submit_bio">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO/submit_bio" body="Submits an I/O operation to the block device layer."/>
          </ownedOperation>
          <ownedOperation name="submit_bh">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO/submit_bh" body="Submits an I/O operation to the buffer cache."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO" contract="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Network Stack">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" body="The Network Protocol Stack is responsible for handling communication between network interfaces and data transmission over the network. It consists of a set of protocols such as TCP/IP, ICMP, and UDP that handles different aspects of network communication. The Network Protocol Stack also manages interfaces with different protocols, network devices, and network routing."/>
        <packagedElement xsi:type="uml:Interface" name="Socket API">
          <ownedOperation name="socket">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Socket%20API/socket" body="Creates a new socket"/>
          </ownedOperation>
          <ownedOperation name="bind">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Socket%20API/bind" body="Attaches a socket to a specific address and port"/>
          </ownedOperation>
          <ownedOperation name="listen">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Socket%20API/listen" body="Listens for incoming connections on a socket"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Socket%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Socket%20API"/>
        <packagedElement xsi:type="uml:Interface" name="TCP/IP stack">
          <ownedOperation name="TCP protocol implementation">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%2FIP%20stack/TCP%20protocol%20implementation" body="Implements the Transmission Control Protocol"/>
          </ownedOperation>
          <ownedOperation name="IP protocol implementation">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%2FIP%20stack/IP%20protocol%20implementation" body="Implements the Internet Protocol"/>
          </ownedOperation>
          <ownedOperation name="ARP protocol implementation">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%2FIP%20stack/ARP%20protocol%20implementation" body="Implements the Address Resolution Protocol"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%2FIP%20stack" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%2FIP%20stack"/>
        <packagedElement xsi:type="uml:Interface" name="Ethernet Drivers">
          <ownedOperation name="e1000_driver">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Ethernet%20Drivers/e1000_driver" body="Driver for Intel PRO/1000 network interface cards"/>
          </ownedOperation>
          <ownedOperation name="tg3_driver">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Ethernet%20Drivers/tg3_driver" body="Driver for Broadcom network interface cards"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Ethernet%20Drivers" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Ethernet%20Drivers"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Synchronization%20primitives/Semaphore%20API"/>
        <packagedElement xsi:type="uml:Component" name="Sockets">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets" body="Sockets provide a way for applications to communicate over a network. They create an endpoint for receiving or sending data, and can be used for a variety of network protocols such as TCP, UDP, and ICMP."/>
          <packagedElement xsi:type="uml:Interface" name="Socket API">
            <ownedOperation name="socket">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/socket" body="Creates a new socket"/>
            </ownedOperation>
            <ownedOperation name="bind">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/bind" body="Assigns a local address to a socket"/>
            </ownedOperation>
            <ownedOperation name="listen">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/listen" body="Listens for connections on a socket"/>
            </ownedOperation>
            <ownedOperation name="accept">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/accept" body="Accepts a new connection on a socket"/>
            </ownedOperation>
            <ownedOperation name="connect">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/connect" body="Initiates a connection to a remote socket"/>
            </ownedOperation>
            <ownedOperation name="send">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/send" body="Sends data on a socket"/>
            </ownedOperation>
            <ownedOperation name="recv">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API/recv" body="Receives data from a socket"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Sockets/Socket%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices/Network%20Device%20Drivers%20API"/>
        <packagedElement xsi:type="uml:Component" name="Packet Classification">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification" body="The packet classification component is responsible for classifying incoming packets into different types based on their protocol and other various characteristics. This component plays a critical role in determining how the incoming packets should be processed by other components in the network stack."/>
          <packagedElement xsi:type="uml:Interface" name="Classification API">
            <ownedOperation name="classify_packet">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification/Classification%20API/classify_packet" body="This function takes a packet as input and returns the type of packet it is."/>
            </ownedOperation>
            <ownedOperation name="add_class">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification/Classification%20API/add_class" body="This function adds a new class to the packet classification system."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification/Classification%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification/Classification%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Traffic Control">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control" body="Traffic Control is a subsystem of the Linux Kernel's network stack that enables precise control over how packets are queued and transmitted. It provides QoS (Quality of Service) for different types of network traffic by applying various scheduling algorithms and policies to prioritize, limit, or shape packet flows."/>
          <packagedElement xsi:type="uml:Interface" name="Traffic Control API">
            <ownedOperation name="tc qdisc add">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control/Traffic%20Control%20API/tc%20qdisc%20add" body="Adds a new queueing discipline to a network interface."/>
            </ownedOperation>
            <ownedOperation name="tc class add">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control/Traffic%20Control%20API/tc%20class%20add" body="Adds a new traffic class to a queueing discipline."/>
            </ownedOperation>
            <ownedOperation name="tc filter add">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control/Traffic%20Control%20API/tc%20filter%20add" body="Adds a new filter to a traffic class."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control/Traffic%20Control%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control/Traffic%20Control%20API"/>
          <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Traffic%20Control" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Packet%20Classification/Classification%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="IPv4 and IPv6 Protocol Stack">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack" body="This component provides support for the IPv4 and IPv6 internet protocol versions in the stack for network communication. It handles the processing of packets according to the IP protocol specification, including packet fragmentation, reassembly, routing and network address translation (NAT)."/>
          <packagedElement xsi:type="uml:Interface" name="IP Protocol APIs">
            <ownedOperation name="ip_rcv">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IP%20Protocol%20APIs/ip_rcv" body="Receives an IP packet and delivers it to the appropriate socket."/>
            </ownedOperation>
            <ownedOperation name="ip_local_deliver">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IP%20Protocol%20APIs/ip_local_deliver" body="Handles the processing of locally initiated transmissions using IP protocol."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IP%20Protocol%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IP%20Protocol%20APIs"/>
          <packagedElement xsi:type="uml:Interface" name="IPv4 APIs">
            <ownedOperation name="ipv4_forward">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IPv4%20APIs/ipv4_forward" body="Forwards IPv4 packets across different networks."/>
            </ownedOperation>
            <ownedOperation name="ipv4_frag_reasm">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IPv4%20APIs/ipv4_frag_reasm" body="Assembles fragments of an IP packet."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IPv4%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/IPv4%20and%20IPv6%20Protocol%20Stack/IPv4%20APIs"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="UDP Protocol">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol" body="User Datagram Protocol (UDP) is one of the protocols in the Internet Protocol suite that transmits datagrams over an internet protocol (IP) network."/>
          <packagedElement xsi:type="uml:Interface" name="UDP Socket API">
            <ownedOperation name="socket">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API/socket" body="creates a new UDP socket"/>
            </ownedOperation>
            <ownedOperation name="bind(), connect">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API/bind(),%20connect" body="binds the socket to an IP address and port, or connects the socket to a remote address"/>
            </ownedOperation>
            <ownedOperation name="sendto(), recvfrom">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API/sendto(),%20recvfrom" body="send or receive datagrams over the network"/>
            </ownedOperation>
            <ownedOperation name="setsockopt(), getsockopt">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API/setsockopt(),%20getsockopt" body="sets or retrieves socket options such as broadcast, TTL, and multicast."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/UDP%20Protocol/UDP%20Socket%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="ICMP Protocol">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol" body="ICMP (Internet Control Message Protocol) is used for diagnostics and error reporting in IP networks. It provides a way for network devices to report error conditions to the original source of the IP packet, as well as for other network devices to determine the status of particular hosts or the network as a whole."/>
          <packagedElement xsi:type="uml:Interface" name="ICMP API">
            <ownedOperation name="icmp_send">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol/ICMP%20API/icmp_send" body="Send an ICMP packet"/>
            </ownedOperation>
            <ownedOperation name="icmp_rcv">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol/ICMP%20API/icmp_rcv" body="Receive an ICMP packet"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol/ICMP%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol/ICMP%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/ICMP%20Protocol/ICMP%20API"/>
        <packagedElement xsi:type="uml:Component" name="Multicast Routing">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Multicast%20Routing" body="Multicast routing refers to the process of routing network traffic to multicast groups instead of individual hosts. It involves determining optimal paths for multicast traffic through an internetwork to reach a specific destination. Multicast routing protocols are used to manage the propagation of multicast traffic through the network, and they maintain a database of all multicast addresses in use and the hosts that belong to them. "/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Transport Layer Security (TLS)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)" body="TLS is a cryptographic protocol that provides secure communication over the Internet."/>
          <packagedElement xsi:type="uml:Interface" name="OpenSSL API">
            <ownedOperation name="SSL_CTX_new">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/OpenSSL%20API/SSL_CTX_new" body="Creates a new SSL_CTX object"/>
            </ownedOperation>
            <ownedOperation name="SSL_new">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/OpenSSL%20API/SSL_new" body="Creates a new SSL object"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/OpenSSL%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/OpenSSL%20API"/>
          <packagedElement xsi:type="uml:Interface" name="GnuTLS API">
            <ownedOperation name="gnutls_certificate_type_get">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/GnuTLS%20API/gnutls_certificate_type_get" body="Returns the certificate type"/>
            </ownedOperation>
            <ownedOperation name="gnutls_priority_set">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/GnuTLS%20API/gnutls_priority_set" body="Sets the cipher suite priority string"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/GnuTLS%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Transport%20Layer%20Security%20(TLS)/GnuTLS%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Firewall">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall" body="Responsible for monitoring and filtering all incoming and outgoing network traffic based on predefined security rules to protect a system from unauthorized access and malicious traffic."/>
          <packagedElement xsi:type="uml:Interface" name="Netfilter Hooks API">
            <ownedOperation name="nf_register_hook">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall/Netfilter%20Hooks%20API/nf_register_hook" body="Registers a hook function at a specific point in the Netfilter hook tuple."/>
            </ownedOperation>
            <ownedOperation name="nf_unregister_hook">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall/Netfilter%20Hooks%20API/nf_unregister_hook" body="Unregisters a previously registered hook."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall/Netfilter%20Hooks%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Firewall/Netfilter%20Hooks%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Routing Table">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Routing%20Table" body="The routing table is a data structure that contains information about the routes that packets can take as they travel through the network."/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Bridge">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge" body="The Bridge component provides support for Ethernet bridges. A bridge is a way to connect two separate Ethernet networks into a single network."/>
          <packagedElement xsi:type="uml:Interface" name="Bridge control">
            <ownedOperation name="br_add_bridge">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control/br_add_bridge" body="Adds a new Ethernet bridge interface to the system"/>
            </ownedOperation>
            <ownedOperation name="br_del_bridge">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control/br_del_bridge" body="Removes an Ethernet bridge interface from the system"/>
            </ownedOperation>
            <ownedOperation name="br_ioctl">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control/br_ioctl" body="IOCTL handler for the Ethernet bridge interface"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control"/>
          <packagedElement xsi:type="uml:Interface" name="Bridge forwarding">
            <ownedOperation name="br_forward">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20forwarding/br_forward" body="Performs Ethernet bridging by forwarding packets between interfaces"/>
            </ownedOperation>
            <ownedOperation name="br_handle_frame">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20forwarding/br_handle_frame" body="Handles an incoming Ethernet frame on a bridge interface"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20forwarding" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20forwarding"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20control"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/Bridge/Bridge%20forwarding"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/File%20Systems/Network%20File%20System%20(NFS)/NFS%20API"/>
        <packagedElement xsi:type="uml:Component" name="TCP Congestion Control">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control" body="TCP Congestion Control is responsible for controlling the rate of transmission of data over a network based on the feedback of network congestion."/>
          <packagedElement xsi:type="uml:Interface" name="Congestion Control API">
            <ownedOperation name="congestion_control_register">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control/Congestion%20Control%20API/congestion_control_register" body="Registers a new congestion control algorithm."/>
            </ownedOperation>
            <ownedOperation name="tcp_set_congestion_control">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control/Congestion%20Control%20API/tcp_set_congestion_control" body="Sets the current congestion control algorithm to the specified algorithm."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control/Congestion%20Control%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control/Congestion%20Control%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Network%20Stack" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Stack/TCP%20Congestion%20Control/Congestion%20Control%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="File System">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System" body="The file system component manages the storage of data on disk, including creating, reading, writing, and deleting files and directories. It also provides a virtual file system interface that abstracts away the specific file system implementation details allowing applications to access different file systems in a uniform manner."/>
        <packagedElement xsi:type="uml:Interface" name="VFS API">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API/open" body="Opens a file and returns a file descriptor."/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API/read" body="Reads data from a file given its file descriptor."/>
          </ownedOperation>
          <ownedOperation name="write">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API/write" body="Writes data to a file given its file descriptor."/>
          </ownedOperation>
          <ownedOperation name="close">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API/close" body="Closes a file given its file descriptor."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/VFS%20API"/>
        <packagedElement xsi:type="uml:Interface" name="File System API">
          <ownedOperation name="mkfs">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API/mkfs" body="Formats a partition with a specific file system type."/>
          </ownedOperation>
          <ownedOperation name="mount">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API/mount" body="Mounts a file system on a directory."/>
          </ownedOperation>
          <ownedOperation name="sync">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API/sync" body="Writes all dirty data in memory cache to disk."/>
          </ownedOperation>
          <ownedOperation name="unlink">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API/unlink" body="Removes a file from the file system."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/File%20System%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Virtual%20file%20system/VFS%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Virtual%20Memory%20Manager"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Physical%20Memory%20Management"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Memory%20Management.1/Swapping"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/I%2FO%20Scheduler"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/I%2FO%20Management/Block%20Device%20I%2FO"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System/Proc%20File%20System%20API"/>
        <packagedElement xsi:type="uml:Component" name="Page Cache">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache" body="A kernel module in charge of keeping in memory the most frequently accessed data from storage devices, aiming to reduce disk access and improve performance."/>
          <packagedElement xsi:type="uml:Interface" name="File System Cache API">
            <ownedOperation name="add_to_page_cache">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API/add_to_page_cache" body="Adds a page to the page cache"/>
            </ownedOperation>
            <ownedOperation name="find_get_page">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API/find_get_page" body="Looks for the page in the cache and returns it if found. Also increments the reference count."/>
            </ownedOperation>
            <ownedOperation name="unlock_page">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API/unlock_page" body="Unlocks a locked page"/>
            </ownedOperation>
            <ownedOperation name="lock_page">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API/lock_page" body="Locks a page for exclusive use"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/File%20System%20Cache%20API"/>
          <packagedElement xsi:type="uml:Interface" name="Block Layer API">
            <ownedOperation name="set_page_dirty">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API/set_page_dirty" body="Marks a page as dirty"/>
            </ownedOperation>
            <ownedOperation name="wait_on_page_locked">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API/wait_on_page_locked" body="Waits until a page is unlocked"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Page%20Cache/Block%20Layer%20API"/>
        <packagedElement xsi:type="uml:Component" name="Inode Cache">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache" body="The Inode Cache component caches the inode data structures for all the files/directories in the file system. It stores the recently accessed inodes in memory and speeds up the file system lookup operation."/>
          <packagedElement xsi:type="uml:Interface" name="Inode Cache API">
            <ownedOperation name="iget">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache/Inode%20Cache%20API/iget" body="Retrieves the inode corresponding to the specified inode number and returns it to the caller"/>
            </ownedOperation>
            <ownedOperation name="iget_locked">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache/Inode%20Cache%20API/iget_locked" body="Locks the inode of the specified number and returns it to the caller"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache/Inode%20Cache%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache/Inode%20Cache%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Inode%20Cache/Inode%20Cache%20API"/>
        <packagedElement xsi:type="uml:Component" name="Buffer Cache">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache" body="The buffer cache is responsible for caching filesystem data in memory so that it can be read faster."/>
          <packagedElement xsi:type="uml:Interface" name="Buffer Cache API">
            <ownedOperation name="find_get_page">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API/find_get_page" body="Finds or retrieves a page from the page cache."/>
            </ownedOperation>
            <ownedOperation name="mark_buffer_dirty">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API/mark_buffer_dirty" body="Marks a buffer as dirty."/>
            </ownedOperation>
            <ownedOperation name="submit_bh">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API/submit_bh" body="Submits a buffer for IO to the block device layer."/>
            </ownedOperation>
            <ownedOperation name="lock_buffer">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API/lock_buffer" body="Locks a buffer."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Buffer%20Cache/Buffer%20Cache%20API"/>
        <packagedElement xsi:type="uml:Component" name="Directory Cache">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache" body="The Directory Cache caches directory entries in memory, to avoid having to Access the file system every time a directory is queried. It maintains a hashed table structure that holds references to the directory entries in memory."/>
          <packagedElement xsi:type="uml:Interface" name="Directory Cache API">
            <ownedOperation name="d_lookup">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache/Directory%20Cache%20API/d_lookup" body="Looks up a directory entry by the given name."/>
            </ownedOperation>
            <ownedOperation name="d_add">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache/Directory%20Cache%20API/d_add" body="Adds a new directory entry to the cache."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache/Directory%20Cache%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Directory%20Cache/Directory%20Cache%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/File%20Management"/>
        <packagedElement xsi:type="uml:Component" name="Extended Attributes">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes" body="Extended Attributes, also known as xattrs, are used to associate arbitrary metadata to files, such as file origin, author, content-type, etc."/>
          <packagedElement xsi:type="uml:Interface" name="Extended Attribute APIs">
            <ownedOperation name="setxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/setxattr" body="Sets the value of an extended attribute."/>
            </ownedOperation>
            <ownedOperation name="lsetxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/lsetxattr" body="Sets the value of an extended attribute on a file or directory specified by a path."/>
            </ownedOperation>
            <ownedOperation name="fsetxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/fsetxattr" body="Sets the value of an extended attribute on a file descriptor."/>
            </ownedOperation>
            <ownedOperation name="getxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/getxattr" body="Gets the value of an extended attribute of a file or directory."/>
            </ownedOperation>
            <ownedOperation name="lgetxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/lgetxattr" body="Gets the value of an extended attribute of a file or directory specified by a path."/>
            </ownedOperation>
            <ownedOperation name="fgetxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/fgetxattr" body="Gets the value of an extended attribute of a file descriptor."/>
            </ownedOperation>
            <ownedOperation name="removexattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/removexattr" body="Removes an extended attribute from a file or directory."/>
            </ownedOperation>
            <ownedOperation name="lremovexattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/lremovexattr" body="Removes an extended attribute from a file or directory specified by a path."/>
            </ownedOperation>
            <ownedOperation name="fremovexattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs/fremovexattr" body="Removes an extended attribute from a file descriptor."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Extended%20Attributes/Extended%20Attribute%20APIs"/>
        <packagedElement xsi:type="uml:Component" name="Journaling">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling" body="Journaling is a feature of filesystems that records changes to files in a journal, allowing for faster recovery in case of system failures or crashes."/>
          <packagedElement xsi:type="uml:Interface" name="Journaling API">
            <ownedOperation name="journal_create">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API/journal_create" body="Creates a new journal for the filesystem."/>
            </ownedOperation>
            <ownedOperation name="journal_destroy">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API/journal_destroy" body="Destroys an existing journal for the filesystem."/>
            </ownedOperation>
            <ownedOperation name="journal_start">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API/journal_start" body="Begins journaling for a given operation."/>
            </ownedOperation>
            <ownedOperation name="journal_commit">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API/journal_commit" body="Commits a given operation to the journal."/>
            </ownedOperation>
            <ownedOperation name="journal_replay">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API/journal_replay" body="Replays the journal to recover data."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Journaling/Journaling%20API"/>
        <packagedElement xsi:type="uml:Component" name="Distributed File System (DFS)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)" body="DFS is a file system that allows multiple users to access file storage from multiple servers through a distributed network. It provides a transparent view of files on multiple servers as if they were located on a single server. DFS replicates file storage across multiple servers to provide high availability and scalability. It also provides load balancing and fault tolerance capabilities."/>
          <packagedElement xsi:type="uml:Interface" name="DFS API">
            <ownedOperation name="dfs_open">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_open" body="Opens a file for reading and writing in DFS."/>
            </ownedOperation>
            <ownedOperation name="dfs_close">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_close" body="Closes a file in DFS."/>
            </ownedOperation>
            <ownedOperation name="dfs_read">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_read" body="Reads data from a file in DFS."/>
            </ownedOperation>
            <ownedOperation name="dfs_write">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_write" body="Writes data to a file in DFS."/>
            </ownedOperation>
            <ownedOperation name="dfs_seek">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_seek" body="Moves the read/write pointer to a specified location in a file in DFS."/>
            </ownedOperation>
            <ownedOperation name="dfs_delete">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API/dfs_delete" body="Deletes a file in DFS."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)" supplier="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/File%20System/Distributed%20File%20System%20(DFS)/DFS%20API"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Proc File System">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System" body="The Proc File System provides an interface to kernel data structures and functions that does not involve kernel modules, allowing it to be used even by applications that aren’t dynamically loadable kernel modules."/>
        <packagedElement xsi:type="uml:Interface" name="Proc File System API">
          <ownedOperation name="proc_create">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System/Proc%20File%20System%20API/proc_create" body="Creates a new/proc entry."/>
          </ownedOperation>
          <ownedOperation name="proc_remove">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System/Proc%20File%20System%20API/proc_remove" body="Removes a /proc entry."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System/Proc%20File%20System%20API" contract="//Linux%20Kernel/Linux%20Kernel/Proc%20File%20System/Proc%20File%20System%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Sysfs File System">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System" body="The sysfs file system provides a way to export kernel data structures, their attributes, and link them to devices or kernel modules. It acts as a virtual file system that allows access to kernel data structures from user space."/>
        <packagedElement xsi:type="uml:Interface" name="Sysfs API">
          <ownedOperation name="sysfs_create_file">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API/sysfs_create_file" body="Creates a file in the sysfs directory associated with a specified device, module or driver."/>
          </ownedOperation>
          <ownedOperation name="sysfs_remove_file">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API/sysfs_remove_file" body="Removes a file from the sysfs directory associated with a specified device, module or driver."/>
          </ownedOperation>
          <ownedOperation name="sysfs_create_group">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API/sysfs_create_group" body="Creates a group of attributes in the sysfs directory associated with a specified device, module or driver."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System" supplier="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API" contract="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Linux Kernel Security Module (LMS)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)" body="The Security Modules component is responsible for managing access control, managing security policies, and auditing of the Linux Kernel."/>
        <packagedElement xsi:type="uml:Interface" name="Security Framework">
          <ownedOperation name="securityfs_create_file">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework/securityfs_create_file" body="Creates a file in /sys/kernel/security/ with the given attributes."/>
          </ownedOperation>
          <ownedOperation name="security_cred_alloc_blank">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework/security_cred_alloc_blank" body="Allocates and initializes a blank security credential."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework"/>
        <packagedElement xsi:type="uml:Interface" name="Audit">
          <ownedOperation name="audit_log_user_message">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Audit/audit_log_user_message" body="Logs an audit event for a user message."/>
          </ownedOperation>
          <ownedOperation name="audit_log_access_denied">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Audit/audit_log_access_denied" body="Logs an audit event for an access denied message."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Audit" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Audit"/>
        <packagedElement xsi:type="uml:Component" name="IMA/EVM">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM" body="Integrity Measurement Architecture (IMA) and Extended Verification Module (EVM) are two security components that provide integrity protection and verification of data on Linux filesystems. IMA measures each file's hash value and stores the measurement in a secure location. EVM provides digital signatures to verify the measured values."/>
          <packagedElement xsi:type="uml:Interface" name="IMA/EVM API">
            <ownedOperation name="ima_file_check">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM/IMA%2FEVM%20API/ima_file_check" body="Checks the integrity of a file by computing its hash value and comparing it with the stored value."/>
            </ownedOperation>
            <ownedOperation name="evm_verifyxattr">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM/IMA%2FEVM%20API/evm_verifyxattr" body="Verifies the integrity of an extended attribute by checking its digital signature."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM/IMA%2FEVM%20API" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/IMA%2FEVM/IMA%2FEVM%20API"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Linux Security Module (LSM)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)" body="LSM provides a framework for a range of security modules that can be loaded into the kernel at runtime to enforce access controls and other security policies."/>
        <packagedElement xsi:type="uml:Interface" name="Security Hooks">
          <ownedOperation name="security_inode_permission">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks/security_inode_permission" body="Called when the kernel checks whether a process has permission to access a given file I-node."/>
          </ownedOperation>
          <ownedOperation name="security_ptrace_access_check">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks/security_ptrace_access_check" body="Called when the kernel checks whether a process has permission to attach to another process with a debugger using ptrace."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks"/>
        <packagedElement xsi:type="uml:Interface" name="Major Security Modules"/>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Major%20Security%20Modules" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Major%20Security%20Modules"/>
        <packagedElement xsi:type="uml:Component" name="Access Control List (ACL)">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)" body="ACL is a part of the Linux Security Module (LSM) framework, responsible for granting or denying permissions to access an object depending on the user or group requesting access. It allows for fine-grain control over permissions and is often used in multi-user environments."/>
          <packagedElement xsi:type="uml:Interface" name="ACL API">
            <ownedOperation name="acl_permission_check">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)/ACL%20API/acl_permission_check" body="Checks if the requested operation by the user is allowed"/>
            </ownedOperation>
            <ownedOperation name="posix_acl_init">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)/ACL%20API/posix_acl_init" body="Initializes a POSIX ACL"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)/ACL%20API" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Access%20Control%20List%20(ACL)/ACL%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Crypto User API">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API" body="The Crypto User API provides an interface for user-space programs to access certain cryptographic services provided by the Linux Kernel. It provides system calls that allow user-space programs to request cryptographic operations, such as encryption, decryption and generation of secure hashes."/>
          <packagedElement xsi:type="uml:Interface" name="Crypto User API Functions">
            <ownedOperation name="crypto_alloc_user">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions/crypto_alloc_user" body="Allocates a user-space cryptographic context that can be used to perform cryptographic operations."/>
            </ownedOperation>
            <ownedOperation name="crypto_destroy_user">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions/crypto_destroy_user" body="Destroys a user-space cryptographic context that was previously allocated with crypto_alloc_user."/>
            </ownedOperation>
            <ownedOperation name="crypto_user_key_alloc">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions/crypto_user_key_alloc" body="Allocates a key that can be used by a user-space application for cryptographic operations."/>
            </ownedOperation>
            <ownedOperation name="crypto_user_key_free">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions/crypto_user_key_free" body="Frees a key that was previously allocated with crypto_user_key_alloc."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Crypto%20User%20API/Crypto%20User%20API%20Functions"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kernel Crypto API">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API" body="The Kernel Crypto API is a component of the Linux Kernel that provides cryptographic services to other kernel components and also to user space applications. The API includes algorithms for encryption, hashing, and authentication, as well as interface functions for key management and random number generation."/>
        <packagedElement xsi:type="uml:Interface" name="Crypto API">
          <ownedOperation name="crypto_alloc_cipher">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Crypto%20API/crypto_alloc_cipher" body="Allocates and initializes a cryptographic cipher object."/>
          </ownedOperation>
          <ownedOperation name="crypto_cipher_setkey">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Crypto%20API/crypto_cipher_setkey" body="Sets the encryption/decryption key for a cipher object."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Crypto%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Crypto%20API"/>
        <packagedElement xsi:type="uml:Interface" name="Hash API">
          <ownedOperation name="crypto_alloc_hash">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Hash%20API/crypto_alloc_hash" body="Allocates and initializes a hash object for a specified hash algorithm."/>
          </ownedOperation>
          <ownedOperation name="crypto_hash_update">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Hash%20API/crypto_hash_update" body="Updates the hash result with additional data."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Hash%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20Crypto%20API/Hash%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Hardware Abstraction Layer (HAL)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)" body="The Hardware Abstraction Layer acts as a bridge between the kernel and hardware components. It provides an abstraction layer between the hardware and the software, making the hardware accessible to software components using standard APIs."/>
        <packagedElement xsi:type="uml:Interface" name="HAL API">
          <ownedOperation name="hal_init">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API/hal_init" body="Initialize the HAL"/>
          </ownedOperation>
          <ownedOperation name="hal_register_device">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API/hal_register_device" body="Register a new device with the HAL"/>
          </ownedOperation>
          <ownedOperation name="hal_destroy_device">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API/hal_destroy_device" body="Unregister a device from the HAL"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)" supplier="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API" contract="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/HAL%20API"/>
        <packagedElement xsi:type="uml:Component" name="Generic Hardware Discovery">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery" body="This component is responsible for discovering the hardware resources available on the system during runtime. It gathers information about system buses, devices, and their respective drivers in order to facilitate communication between the kernel and hardware components."/>
          <packagedElement xsi:type="uml:Interface" name="Hardware Detection API">
            <ownedOperation name="hardware_detection">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery/Hardware%20Detection%20API/hardware_detection" body="Scans the system buses to detect the available hardware resources and their associated drivers."/>
            </ownedOperation>
            <ownedOperation name="driver_detection">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery/Hardware%20Detection%20API/driver_detection" body="Detects the drivers that match each detected bus and device."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery" supplier="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery/Hardware%20Detection%20API" contract="//Linux%20Kernel/Linux%20Kernel/Hardware%20Abstraction%20Layer%20(HAL)/Generic%20Hardware%20Discovery/Hardware%20Detection%20API"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Device Model">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Model" body="The Device Model component is responsible for representing and tracking physical and logical devices in the system, as well as for supporting their hot-plugging and hot-unplugging. It provides a consistent device naming scheme that allows for easy device identification and tracking, and it allows device drivers to register and interact with devices in a uniform manner."/>
        <packagedElement xsi:type="uml:Interface" name="Device Model API">
          <ownedOperation name="device_register">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API/device_register" body="Registers a device with the device model, specifying its parent device, device type, and identification information."/>
          </ownedOperation>
          <ownedOperation name="device_unregister">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API/device_unregister" body="Unregisters a device from the device model."/>
          </ownedOperation>
          <ownedOperation name="device_add">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API/device_add" body="Updates the device model to reflect the hot-plugging of a new device."/>
          </ownedOperation>
          <ownedOperation name="device_del">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API/device_del" body="Updates the device model to reflect the hot-unplugging of an existing device."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Device%20Model" supplier="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API" contract="//Linux%20Kernel/Linux%20Kernel/Device%20Model/Device%20Model%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kernel Modules">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules" body="Kernel modules are pieces of code that can be loaded and unloaded into the kernel as needed, without requiring a reboot of the system. They provide additional functionalities to the kernel, such as new device drivers, file systems, networking protocols, and system calls."/>
        <packagedElement xsi:type="uml:Interface" name="Kernel Module API">
          <ownedOperation name="module_init">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API/module_init" body="Registers the initialization function for the module."/>
          </ownedOperation>
          <ownedOperation name="module_exit">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API/module_exit" body="Registers the cleanup function for the module."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules" supplier="//Linux%20Kernel/Linux%20Kernel/Sysfs%20File%20System/Sysfs%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Modules/Kernel%20Module%20API"/>
      <packagedElement xsi:type="uml:Component" name="Linux Device Drivers">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers" body="Linux Device Drivers provide kernel-level support for various hardware devices, such as disks, network interfaces, and input/output devices. These drivers allow devices to communicate efficiently with the kernel and application programs running on top of the kernel. Device drivers are implemented as kernel modules, which can be loaded and unloaded at runtime as required."/>
        <packagedElement xsi:type="uml:Interface" name="Device Driver API">
          <ownedOperation name="register_chrdev">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API/register_chrdev" body="Registers a character device driver with the kernel"/>
          </ownedOperation>
          <ownedOperation name="platform_driver_register">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API/platform_driver_register" body="Registers a platform device driver with the kernel"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Device%20Driver%20API"/>
        <packagedElement xsi:type="uml:Interface" name="Interrupt Handling API">
          <ownedOperation name="request_irq">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API/request_irq" body="Requests an interrupt line for a device"/>
          </ownedOperation>
          <ownedOperation name="free_irq">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API/free_irq" body="Frees an interrupt line previously requested by a device driver"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Device%20Drivers/Interrupt%20Handling%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="DMA Memory Allocation">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation" body="This component manages the allocation and deallocation of memory regions that are used for direct memory access (DMA) by peripherals and devices."/>
        <packagedElement xsi:type="uml:Interface" name="DMA Memory Allocation API">
          <ownedOperation name="dma_alloc_coherent">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation/DMA%20Memory%20Allocation%20API/dma_alloc_coherent" body="Allocates a coherent memory region for DMA usage."/>
          </ownedOperation>
          <ownedOperation name="dma_free_coherent">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation/DMA%20Memory%20Allocation%20API/dma_free_coherent" body="Frees a previously allocated coherent memory region."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation" supplier="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation/DMA%20Memory%20Allocation%20API" contract="//Linux%20Kernel/Linux%20Kernel/DMA%20Memory%20Allocation/DMA%20Memory%20Allocation%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="POSIX API">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API" body="The POSIX API provides a standard interface for interacting with the operating system. It includes functions for managing processes, threads, files, and other system resources, and conforms to the POSIX specification."/>
        <packagedElement xsi:type="uml:Interface" name="Process Management">
          <ownedOperation name="fork">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Process%20Management/fork" body="Creates a new process by duplicating the calling process."/>
          </ownedOperation>
          <ownedOperation name="execve">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Process%20Management/execve" body="Replaces the current process image with a new process image."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/POSIX%20API" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Process%20Management" contract="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Process%20Management"/>
        <packagedElement xsi:type="uml:Interface" name="File Management">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/File%20Management/open" body="Opens a file or device for reading or writing."/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/File%20Management/read" body="Reads data from a file into a buffer."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/POSIX%20API" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/File%20Management" contract="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/File%20Management"/>
        <packagedElement xsi:type="uml:Interface" name="Thread Management">
          <ownedOperation name="pthread_create">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Thread%20Management/pthread_create" body="Creates a new thread within a process."/>
          </ownedOperation>
          <ownedOperation name="pthread_join">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Thread%20Management/pthread_join" body="Waits for a thread to terminate and retrieves its exit status."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/POSIX%20API" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Thread%20Management" contract="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Thread%20Management"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Thread Management">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Thread%20Management" body="This component manages the creation, scheduling, and termination of threads within the Linux Kernel. It is responsible for ensuring that each thread has access to the necessary resources and that threads are executed fairly and efficiently."/>
        <packagedElement xsi:type="uml:Interface" name="Thread Management API">
          <ownedOperation name="create_thread">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API/create_thread" body="Creates a new thread."/>
          </ownedOperation>
          <ownedOperation name="schedule_thread">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API/schedule_thread" body="Schedules a thread to be executed."/>
          </ownedOperation>
          <ownedOperation name="kill_thread">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API/kill_thread" body="Terminates a thread."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Thread%20Management" supplier="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API" contract="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Thread%20Management" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Signal Handlers">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers" body="Signal Handlers are responsible for handling the signals delivered to a process by the kernel, such as SIGTERM or SIGINT. This component receives the signal and executes a pre-defined action or script associated with the signal."/>
        <packagedElement xsi:type="uml:Interface" name="Signal Handling API">
          <ownedOperation name="signal">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers/Signal%20Handling%20API/signal" body="Registers a function to be called when a specified signal occurs"/>
          </ownedOperation>
          <ownedOperation name="sigaction">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers/Signal%20Handling%20API/sigaction" body="Sets a new action for a specified signal or retrieves the current action for that signal"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers" supplier="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers/Signal%20Handling%20API" contract="//Linux%20Kernel/Linux%20Kernel/Signal%20Handlers/Signal%20Handling%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Scheduler">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler" body="The scheduler component is responsible for scheduling tasks on the CPU for execution. It determines which task gets to run at a given time, and for how long. It ensures fair allocation of resources between processes and manages CPU usage efficiently."/>
        <packagedElement xsi:type="uml:Interface" name="Scheduler API">
          <ownedOperation name="sched_init">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API/sched_init" body="Initializes the scheduler"/>
          </ownedOperation>
          <ownedOperation name="sched_schedule">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API/sched_schedule" body="Selects the next task to run on the CPU"/>
          </ownedOperation>
          <ownedOperation name="sched_yield">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API/sched_yield" body="Yields the CPU voluntarily to another task, allowing the scheduler to pick another task to run"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Scheduler" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API" contract="//Linux%20Kernel/Linux%20Kernel/Scheduler/Scheduler%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Scheduler" supplier="//Linux%20Kernel/Linux%20Kernel/Process%20Management.1/Process%20Management%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Scheduler" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Process%20Management"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Scheduler" supplier="//Linux%20Kernel/Linux%20Kernel/POSIX%20API/Thread%20Management"/>
        <packagedElement xsi:type="uml:Component" name="Priority Inheritance">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Priority%20Inheritance" body="Priority Inheritance is a mechanism used to avoid priority inversion issues by temporarily elevating the priority of the blocked lower-level task to that of the highest priority task holding a resource that it needs."/>
          <packagedElement xsi:type="uml:Interface" name="Priority Inheritance API">
            <ownedOperation name="ipi_boost">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Priority%20Inheritance/Priority%20Inheritance%20API/ipi_boost" body="Temporarily elevates the priority of the blocked lower-level task to that of the highest priority task holding a resource that it needs."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Scheduler/Priority%20Inheritance" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Priority%20Inheritance/Priority%20Inheritance%20API" contract="//Linux%20Kernel/Linux%20Kernel/Scheduler/Priority%20Inheritance/Priority%20Inheritance%20API"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Component" name="Process Priorities">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities" body="Defines the priority levels of processes running on the system. This allows the kernel scheduler to decide what process to execute next based on its priority level."/>
          <packagedElement xsi:type="uml:Interface" name="Priority APIs">
            <ownedOperation name="setpriority">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities/Priority%20APIs/setpriority" body="Allows a process to change its own priority or to change the priority of another process owned by the same user."/>
            </ownedOperation>
            <ownedOperation name="getpriority">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities/Priority%20APIs/getpriority" body="Returns the priority of a process."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities/Priority%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities/Priority%20APIs"/>
        </packagedElement>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Scheduler" supplier="//Linux%20Kernel/Linux%20Kernel/Scheduler/Process%20Priorities/Priority%20APIs"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Real-time Scheduling">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling" body="This component allows real-time scheduling of processes based on their priority. It ensures that the highest priority task is executed first and reduces the response time for critical tasks."/>
        <packagedElement xsi:type="uml:Interface" name="Scheduling">
          <ownedOperation name="set_sched_param">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling/Scheduling/set_sched_param" body="This function is used to set the scheduling parameters for a process"/>
          </ownedOperation>
          <ownedOperation name="get_sched_param">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling/Scheduling/get_sched_param" body="This function is used to get the scheduling parameters for a process"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling" supplier="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling/Scheduling" contract="//Linux%20Kernel/Linux%20Kernel/Real-time%20Scheduling/Scheduling"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kernel and User Space Communication">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication" body="This component is responsible for enabling communication between the kernel and user space. It provides a way for user space programs to interact with the kernel and access system resources such as memory, devices, and file systems."/>
        <packagedElement xsi:type="uml:Interface" name="System Call">
          <ownedOperation name="syscall">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call/syscall" body="Allows user space programs to invoke a function in the kernel"/>
          </ownedOperation>
          <ownedOperation name="exit">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call/exit" body="Terminates the current process and frees all resources associated with it"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/System%20Call"/>
        <packagedElement xsi:type="uml:Interface" name="Virtual File System (VFS)">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/Virtual%20File%20System%20(VFS)/open" body="Opens a file or device and returns a file descriptor"/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/Virtual%20File%20System%20(VFS)/read" body="Reads data from a file or device and returns the number of bytes read"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/Virtual%20File%20System%20(VFS)" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20and%20User%20Space%20Communication/Virtual%20File%20System%20(VFS)"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Networking Devices">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices" body="This component includes the network adapter drivers that interact with the underlying hardware of the system. These drivers provide the interface between the kernel and the physical network devices, like Ethernet controllers or wireless adapters. They handle the transmission and reception of data packets, and perform network-related tasks such as Network Address Translation (NAT) and packet filtering in accordance with the configured network stack."/>
        <packagedElement xsi:type="uml:Interface" name="Network Device Drivers API">
          <ownedOperation name="alloc_etherdev">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices/Network%20Device%20Drivers%20API/alloc_etherdev" body="Allocate and initialize an ethernet device structure."/>
          </ownedOperation>
          <ownedOperation name="register_netdev">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices/Network%20Device%20Drivers%20API/register_netdev" body="Register a new network device."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices" supplier="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices/Network%20Device%20Drivers%20API" contract="//Linux%20Kernel/Linux%20Kernel/Networking%20Devices/Network%20Device%20Drivers%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="TCP/IP Protocol Suite">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/TCP%2FIP%20Protocol%20Suite" body="The TCP/IP Protocol Suite is responsible for communication between hosts in a network. It includes protocols such as TCP, IP, ICMP and ARP."/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Netfilter Framework">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework" body="Netfilter is a framework that provides hooks into various points in the networking stack, allowing filtering and modification of network packets. It is integrated in the Linux Kernel and provides a powerful and flexible way to implement various network-related features."/>
        <packagedElement xsi:type="uml:Interface" name="Netfilter Hooks">
          <ownedOperation name="nf_register_hook">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Hooks/nf_register_hook" body="Registers a netfilter hook."/>
          </ownedOperation>
          <ownedOperation name="nf_unregister_hook">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Hooks/nf_unregister_hook" body="Unregisters a previously registered netfilter hook."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework" supplier="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Hooks" contract="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Hooks"/>
        <packagedElement xsi:type="uml:Interface" name="Netfilter Targets">
          <ownedOperation name="NF_ACCEPT">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Targets/NF_ACCEPT" body="Accepts the packet after modifications."/>
          </ownedOperation>
          <ownedOperation name="NF_DROP">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Targets/NF_DROP" body="Drops the packet."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework" supplier="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Targets" contract="//Linux%20Kernel/Linux%20Kernel/Netfilter%20Framework/Netfilter%20Targets"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Input and Output Traffic Control">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control" body="The Input and Output Traffic Control component is responsible for the management of network traffic, including prioritization and QoS. It ensures that network packets are forwarded between network interfaces and the appropriate processes, while managing bandwidth allocation and congestion control."/>
        <packagedElement xsi:type="uml:Interface" name="Traffic Control API">
          <ownedOperation name="tc">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control/Traffic%20Control%20API/tc" body="Command-line utility for configuration of Traffic Control options"/>
          </ownedOperation>
          <ownedOperation name="tc API">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control/Traffic%20Control%20API/tc%20API" body="API for configuration of Traffic Control options"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control" supplier="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control/Traffic%20Control%20API" contract="//Linux%20Kernel/Linux%20Kernel/Input%20and%20Output%20Traffic%20Control/Traffic%20Control%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Group Quota">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Group%20Quota" body="The Group Quota component is responsible for setting and enforcing resource limits on a group of processes. It manages the resources allocated to a group and limits the usage of system resources by the individual processes in that group."/>
        <packagedElement xsi:type="uml:Interface" name="Group Quota Control">
          <ownedOperation name="set_quota">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Group%20Quota/Group%20Quota%20Control/set_quota" body="Sets quota for a specified group"/>
          </ownedOperation>
          <ownedOperation name="get_quota">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Group%20Quota/Group%20Quota%20Control/get_quota" body="Retrieves the quota set for a specified group"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Group%20Quota" supplier="//Linux%20Kernel/Linux%20Kernel/Group%20Quota/Group%20Quota%20Control" contract="//Linux%20Kernel/Linux%20Kernel/Group%20Quota/Group%20Quota%20Control"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Google File System (GFS)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)" body="A distributed file system developed by Google to provide efficient, reliable access to data using large clusters of commodity hardware."/>
        <packagedElement xsi:type="uml:Interface" name="GFS API">
          <ownedOperation name="create">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/create" body="Creates an empty file or directory with the given path name."/>
          </ownedOperation>
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/open" body="Opens an existing file and returns a file handle that can be used to read from or write to the file."/>
          </ownedOperation>
          <ownedOperation name="read">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/read" body="Reads data from a file identified by its file handle at a given offset."/>
          </ownedOperation>
          <ownedOperation name="write">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/write" body="Writes data to a file identified by its file handle at a given offset."/>
          </ownedOperation>
          <ownedOperation name="close">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/close" body="Closes an open file and releases any resources or locks associated with it."/>
          </ownedOperation>
          <ownedOperation name="delete">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API/delete" body="Deletes a file or directory with the given path name."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)" supplier="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API" contract="//Linux%20Kernel/Linux%20Kernel/Google%20File%20System%20(GFS)/GFS%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Single UNIX Specification (SUS)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)" body="The Single UNIX Specification (SUS) defines the requirements for an operating system to qualify as a UNIX system. It includes a set of standards that describe a common core of UNIX-like functions and services. The SUS specifies API functions for many system services, such as file I/O, process control, and interprocess communication."/>
        <packagedElement xsi:type="uml:Interface" name="POSIX APIs">
          <ownedOperation name="open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/POSIX%20APIs/open" body="Opens a file."/>
          </ownedOperation>
          <ownedOperation name="close">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/POSIX%20APIs/close" body="Closes a file."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)" supplier="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/POSIX%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/POSIX%20APIs"/>
        <packagedElement xsi:type="uml:Interface" name="Signal APIs">
          <ownedOperation name="kill">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/Signal%20APIs/kill" body="Sends a signal to a process or group of processes."/>
          </ownedOperation>
          <ownedOperation name="signal">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/Signal%20APIs/signal" body="Sets a signal handler for a specific signal."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)" supplier="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/Signal%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Single%20UNIX%20Specification%20(SUS)/Signal%20APIs"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Advanced Configuration and Power Interface (ACPI)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)" body="A standardized power management mechanism in the Linux Kernel that enables the OS to communicate with the hardware to control power usage and manage system resources."/>
        <packagedElement xsi:type="uml:Interface" name="ACPI subsystem">
          <ownedOperation name="acpi_bus_register_driver">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20subsystem/acpi_bus_register_driver" body="Register the ACPI bus driver to driver core."/>
          </ownedOperation>
          <ownedOperation name="acpi_install_address_space_handler">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20subsystem/acpi_install_address_space_handler" body="Install an address space handler for a region."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)" supplier="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20subsystem" contract="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20subsystem"/>
        <packagedElement xsi:type="uml:Component" name="ACPI Temperature Monitoring">
          <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20Temperature%20Monitoring" body="This component is responsible for monitoring the temperature of the system by reading data from the hardware. It is a part of the ACPI (Advanced Configuration and Power Interface) subsystem in the Linux Kernel. It provides the interface for the other components to read the temperature data."/>
          <packagedElement xsi:type="uml:Interface" name="ACPI Temperature Monitoring API">
            <ownedOperation name="acpi_thermal_read">
              <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20Temperature%20Monitoring/ACPI%20Temperature%20Monitoring%20API/acpi_thermal_read" body="Read the temperature data from ACPI hardware and return the temperature in Celsius."/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20Temperature%20Monitoring" supplier="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20Temperature%20Monitoring/ACPI%20Temperature%20Monitoring%20API" contract="//Linux%20Kernel/Linux%20Kernel/Advanced%20Configuration%20and%20Power%20Interface%20(ACPI)/ACPI%20Temperature%20Monitoring/ACPI%20Temperature%20Monitoring%20API"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Trusted Computing Base (TCB)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" body="The Trusted Computing Base (TCB) refers to the portions of the Linux Kernel which enforce security policies and isolate security-critical functions to prevent unauthorized access or modification. It includes the Security Module Framework, LSM Hooks, SMACK, SELinux and AppArmor."/>
        <packagedElement xsi:type="uml:Interface" name="Security Module Framework">
          <ownedOperation name="security_module_enable">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework/security_module_enable" body="Enables a security module to be used by the kernel."/>
          </ownedOperation>
          <ownedOperation name="security_secid_to_secctx">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework/security_secid_to_secctx" body="Converts a security ID (secid) to a security context string."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework" contract="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework"/>
        <packagedElement xsi:type="uml:Interface" name="LSM Hooks">
          <ownedOperation name="security_inode_init_security">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks/security_inode_init_security" body="Initializes the security attributes of an inode."/>
          </ownedOperation>
          <ownedOperation name="security_file_permission">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks/security_file_permission" body="Checks the permissions of a file against a given security context."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks" contract="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks"/>
        <packagedElement xsi:type="uml:Interface" name="SELinux">
          <ownedOperation name="security_sb_set_mnt_opts">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SELinux/security_sb_set_mnt_opts" body="Sets mount options for the SELinux filesystem."/>
          </ownedOperation>
          <ownedOperation name="security_file_alloc_security">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SELinux/security_file_alloc_security" body="Allocates and initializes a new security structure for a file."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SELinux" contract="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SELinux"/>
        <packagedElement xsi:type="uml:Interface" name="SMACK">
          <ownedOperation name="smack_inode_alloc_security">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK/smack_inode_alloc_security" body="Allocates and initializes a new security structure for a given inode."/>
          </ownedOperation>
          <ownedOperation name="smack_file_permission">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK/smack_file_permission" body="Checks the permissions of a file against a given security context."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK" contract="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK"/>
        <packagedElement xsi:type="uml:Interface" name="AppArmor">
          <ownedOperation name="apparmor_inode_alloc_security">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/AppArmor/apparmor_inode_alloc_security" body="Allocates and initializes a new security structure for a given inode."/>
          </ownedOperation>
          <ownedOperation name="apparmor_file_mmap">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/AppArmor/apparmor_file_mmap" body="Enforces AppArmor policy for file memory maps."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/AppArmor" contract="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/AppArmor"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Capability-based Security">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security" body="A security model that grants or revokes privileges to processes based on the capabilities granted to them by the system administrator. It is designed to limit the actions that a process can perform, reducing the risk of security breaches and allowing fine-grained access control."/>
        <packagedElement xsi:type="uml:Interface" name="Capabilites API">
          <ownedOperation name="cap_capable">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security/Capabilites%20API/cap_capable" body="Checks whether the current process has a specified capability."/>
          </ownedOperation>
          <ownedOperation name="capable_wrt_inode_uidgid">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security/Capabilites%20API/capable_wrt_inode_uidgid" body="Checks whether the current process has the capability to perform an operation on a file, relative to the uid/gid."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security" supplier="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security/Capabilites%20API" contract="//Linux%20Kernel/Linux%20Kernel/Capability-based%20Security/Capabilites%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="AppArmor">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/AppArmor" body="AppArmor is a Mandatory Access Control (MAC) system that confines programs to a limited set of resources, protecting the system and data from malicious or accidental harm."/>
        <packagedElement xsi:type="uml:Interface" name="AppArmor Profile API">
          <ownedOperation name="aa_change_profile">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20Profile%20API/aa_change_profile" body="Switches the AppArmor profile for the current process."/>
          </ownedOperation>
          <ownedOperation name="aa_getcon">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20Profile%20API/aa_getcon" body="Retrieves the AppArmor context label for the current process."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20Profile%20API" contract="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20Profile%20API"/>
        <packagedElement xsi:type="uml:Interface" name="AppArmor LSM API">
          <ownedOperation name="aa_cred_prepare">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20LSM%20API/aa_cred_prepare" body="Performs the necessary checks before granting access to a system object."/>
          </ownedOperation>
          <ownedOperation name="aa_inode_getattr">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20LSM%20API/aa_inode_getattr" body="Retrieves attributes of an inode in a secure manner."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20LSM%20API" contract="//Linux%20Kernel/Linux%20Kernel/AppArmor/AppArmor%20LSM%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Major%20Security%20Modules"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/AppArmor" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="SELinux">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/SELinux" body="SELinux (Security-Enhanced Linux) is a security architecture integrated into the Linux Kernel. It provides a mechanism for supporting security policies that confine user programs and system services within predefined rules."/>
        <packagedElement xsi:type="uml:Interface" name="SELinux API">
          <ownedOperation name="security_sid">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/SELinux/SELinux%20API/security_sid" body="Get the security identifier (SID) associated with a process, thread or file"/>
          </ownedOperation>
          <ownedOperation name="security_classify_flow">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/SELinux/SELinux%20API/security_classify_flow" body="Apply SELinux policy rules to network data flows"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/SELinux/SELinux%20API" contract="//Linux%20Kernel/Linux%20Kernel/SELinux/SELinux%20API"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Kernel%20Security%20Module%20(LMS)/Security%20Framework"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Security%20Hooks"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Security%20Module%20(LSM)/Major%20Security%20Modules"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/Security%20Module%20Framework"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/LSM%20Hooks"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/SMACK"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/SELinux" supplier="//Linux%20Kernel/Linux%20Kernel/Trusted%20Computing%20Base%20(TCB)/AppArmor"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Linux Integrity Measurement Architecture (IMA)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Integrity%20Measurement%20Architecture%20(IMA)" body="IMA is a Linux Kernel security module that verifies the integrity of a file before that file is accessed by a user or application. It is designed to detect any unauthorized modifications to critical system files, protection against rootkits, and other malware that hide their activity on the system. IMA uses cryptographic hashes to measure the contents of files and then compares those measurements to a list of expected values in a measurement policy. It can also support digital signatures and public key infrastructure (PKI) for secure measurements."/>
        <packagedElement xsi:type="uml:Interface" name="IMA APIs">
          <ownedOperation name="ima_file_check">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Integrity%20Measurement%20Architecture%20(IMA)/IMA%20APIs/ima_file_check" body="This function is used to check the integrity of a file and return the result."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Integrity%20Measurement%20Architecture%20(IMA)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Integrity%20Measurement%20Architecture%20(IMA)/IMA%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Integrity%20Measurement%20Architecture%20(IMA)/IMA%20APIs"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Unified Key Setup-On-Disk Format (UKS)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)" body="UKS is a disk encryption format that provides the ability to encrypt individual files, directories, or entire partitions. UKS consists of a key management subsystem that handles the storage and retrieval of cryptographic keys and an on-disk format specification that describes how the encrypted data is stored on disk. It is used to provide disk encryption for the Linux Unified Key Setup (LUKS) framework."/>
        <packagedElement xsi:type="uml:Interface" name="Encryption API">
          <ownedOperation name="dm-crypt">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)/Encryption%20API/dm-crypt" body="The device-mapper crypt target, which is used to encrypt block devices, such as hard drives or partitions."/>
          </ownedOperation>
          <ownedOperation name="cryptoloop">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)/Encryption%20API/cryptoloop" body="The original Linux disk encryption system, which was replaced by dm-crypt."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)" supplier="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)/Encryption%20API" contract="//Linux%20Kernel/Linux%20Kernel/Unified%20Key%20Setup-On-Disk%20Format%20(UKS)/Encryption%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Linux Random Number Generator (LRNG)">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Random%20Number%20Generator%20(LRNG)" body="The Linux Random Number Generator (LRNG) generates cryptographically secure random numbers for various applications including key and password generation."/>
        <packagedElement xsi:type="uml:Interface" name="LRNG API">
          <ownedOperation name="get_random_bytes">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Linux%20Random%20Number%20Generator%20(LRNG)/LRNG%20API/get_random_bytes" body="Returns an array of cryptographically secure random bytes."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Linux%20Random%20Number%20Generator%20(LRNG)" supplier="//Linux%20Kernel/Linux%20Kernel/Linux%20Random%20Number%20Generator%20(LRNG)/LRNG%20API" contract="//Linux%20Kernel/Linux%20Kernel/Linux%20Random%20Number%20Generator%20(LRNG)/LRNG%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Cryptographic Accelerators">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators" body="A component responsible for offloading cryptographic operations from the CPU, in order to improve performance and security. It typically consists of a dedicated chip or module that can perform encryption and decryption operations faster than the CPU."/>
        <packagedElement xsi:type="uml:Interface" name="Crypto API">
          <ownedOperation name="crypto_alloc_skcipher">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators/Crypto%20API/crypto_alloc_skcipher" body="Allocate and initialize a symmetric cipher object."/>
          </ownedOperation>
          <ownedOperation name="crypto_enqueue_request">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators/Crypto%20API/crypto_enqueue_request" body="Add a cryptographic request to the queue of a cryptographic accelerator."/>
          </ownedOperation>
          <ownedOperation name="crypto_dequeue_request">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators/Crypto%20API/crypto_dequeue_request" body="Remove a processed cryptographic request from the queue of a cryptographic accelerator."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators" supplier="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators/Crypto%20API" contract="//Linux%20Kernel/Linux%20Kernel/Cryptographic%20Accelerators/Crypto%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Coretemp driver">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver" body="A kernel module that supports monitoring the temperature of Intel Core processors. It provides an interface for applications to read temperature readings and threshold information from the processor's digital temperature sensor."/>
        <packagedElement xsi:type="uml:Interface" name="sysfs interface">
          <ownedOperation name="sysfs_read_temp">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/sysfs%20interface/sysfs_read_temp" body="Reads the current temperature of the processor from sysfs"/>
          </ownedOperation>
          <ownedOperation name="sysfs_read_threshold">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/sysfs%20interface/sysfs_read_threshold" body="Reads the threshold values for the processor's critical and non-critical temperatures from sysfs"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver" supplier="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/sysfs%20interface" contract="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/sysfs%20interface"/>
        <packagedElement xsi:type="uml:Interface" name="thermal API">
          <ownedOperation name="thermal_add_hwmon_sysfs">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/thermal%20API/thermal_add_hwmon_sysfs" body="Registers a thermal zone for the processor temperature as a hwmon device in sysfs"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver" supplier="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/thermal%20API" contract="//Linux%20Kernel/Linux%20Kernel/Coretemp%20driver/thermal%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Interrupt Handling">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling" body="Interrupt handling is responsible for managing hardware interrupts generated by devices connected to the system. It facilitates communicating events generated by hardware devices to the kernel and the appropriate device driver."/>
        <packagedElement xsi:type="uml:Interface" name="IRQ Handling APIs">
          <ownedOperation name="request_irq">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs/request_irq" body="Registers a handler for a particular interrupt with the kernel."/>
          </ownedOperation>
          <ownedOperation name="free_irq">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs/free_irq" body="Unregisters a handler for a particular interrupt from the kernel."/>
          </ownedOperation>
          <ownedOperation name="handle_irq">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs/handle_irq" body="Handles an interrupt by invoking the registered interrupt handler."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling" supplier="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs" contract="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling/IRQ%20Handling%20APIs"/>
        <packagedElement xsi:type="uml:Usage" client="//Linux%20Kernel/Linux%20Kernel/Interrupt%20Handling" supplier="//Linux%20Kernel/Linux%20Kernel/Thread%20Management/Thread%20Management%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Network Multipathing">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing" body="Network Multipathing is responsible for providing the ability of communication with multiple network paths concurrently, ensuring redundancy and load balancing to ensure network availability and efficient use of network resources. This component provides a single interface to applications and the rest of the system for this functionality."/>
        <packagedElement xsi:type="uml:Interface" name="Multipath API">
          <ownedOperation name="mpath_add_path">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing/Multipath%20API/mpath_add_path" body="This function is used to add paths to a multipath device."/>
          </ownedOperation>
          <ownedOperation name="mpath_del_path">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing/Multipath%20API/mpath_del_path" body="This function is used to remove paths from a multipath device."/>
          </ownedOperation>
          <ownedOperation name="mpath_add_hba">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing/Multipath%20API/mpath_add_hba" body="This function is used to add a host bus adapter to a multipath device."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing" supplier="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing/Multipath%20API" contract="//Linux%20Kernel/Linux%20Kernel/Network%20Multipathing/Multipath%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kernel Debugging">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging" body="Kernel Debugging is the process of finding and fixing issues in the Linux Kernel. It is achieved by using various tools and techniques such as printk, kdump, and GDB."/>
        <packagedElement xsi:type="uml:Interface" name="Kernel Debugging API">
          <ownedOperation name="printk">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging/Kernel%20Debugging%20API/printk" body="Kernel function used to print messages to system logs for debugging purposes."/>
          </ownedOperation>
          <ownedOperation name="kdump">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging/Kernel%20Debugging%20API/kdump" body="Tool used to capture a dump of the kernel when it crashes for debugging purposes."/>
          </ownedOperation>
          <ownedOperation name="GDB">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging/Kernel%20Debugging%20API/GDB" body="GNU Debugger used to attach to the kernel and debug issues in real-time."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging/Kernel%20Debugging%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20Debugging/Kernel%20Debugging%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kprobes and uprobes">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes" body="Kprobes provides an infrastructure for dynamically instrumenting the Linux Kernel. Uprobes allows for dynamic tracing of userspace applications."/>
        <packagedElement xsi:type="uml:Interface" name="Kprobes API">
          <ownedOperation name="register_kprobe">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Kprobes%20API/register_kprobe" body="Registers a Kprobe with the Linux Kernel."/>
          </ownedOperation>
          <ownedOperation name="unregister_kprobe">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Kprobes%20API/unregister_kprobe" body="Unregisters a Kprobe from the Linux Kernel."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes" supplier="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Kprobes%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Kprobes%20API"/>
        <packagedElement xsi:type="uml:Interface" name="Uprobes API">
          <ownedOperation name="register_uprobe">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Uprobes%20API/register_uprobe" body="Registers an Uprobe with the Linux Kernel."/>
          </ownedOperation>
          <ownedOperation name="unregister_uprobe">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Uprobes%20API/unregister_uprobe" body="Unregisters an Uprobe from the Linux Kernel."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes" supplier="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Uprobes%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kprobes%20and%20uprobes/Uprobes%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Performance Monitoring">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring" body="This component is responsible for monitoring the performance of the system by collecting and analyzing various metrics such as disk I/O, network activity, CPU usage, and memory usage. It provides tools for developers and system administrators to monitor system performance and identify performance bottlenecks."/>
        <packagedElement xsi:type="uml:Interface" name="Performance Monitoring API">
          <ownedOperation name="get_cpu_usage">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring/Performance%20Monitoring%20API/get_cpu_usage" body="Returns the CPU usage of the system"/>
          </ownedOperation>
          <ownedOperation name="get_memory_usage">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring/Performance%20Monitoring%20API/get_memory_usage" body="Returns the amount of memory currently used by the system"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring" supplier="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring/Performance%20Monitoring%20API" contract="//Linux%20Kernel/Linux%20Kernel/Performance%20Monitoring/Performance%20Monitoring%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Dynamic Tracing with Ftrace">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace" body="Dynamic Tracing with Ftrace is a feature in the Linux Kernel that allows for dynamically instrumenting the kernel code to trace the execution paths and performance of the system. This component hooks into various events throughout the kernel and can generate detailed reports for profiling and debugging purposes."/>
        <packagedElement xsi:type="uml:Interface" name="Ftrace API">
          <ownedOperation name="register_ftrace_function">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace/Ftrace%20API/register_ftrace_function" body="Registers a function with Ftrace to be called when specific events occur in the kernel"/>
          </ownedOperation>
          <ownedOperation name="unregister_ftrace_function">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace/Ftrace%20API/unregister_ftrace_function" body="Unregisters a function from Ftrace that was previously registered with register_ftrace_function"/>
          </ownedOperation>
          <ownedOperation name="trace_printk">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace/Ftrace%20API/trace_printk" body="A tracing function that allows for printing debug output that is associated with a specific trace event"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace" supplier="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace/Ftrace%20API" contract="//Linux%20Kernel/Linux%20Kernel/Dynamic%20Tracing%20with%20Ftrace/Ftrace%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="Kernel Profiling with OProfile">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile" body="Kernel profiling with OProfile is a subsystem in the Linux Kernel that allows developers to investigate the system's performance under various workloads by profiling the kernel and user-space code."/>
        <packagedElement xsi:type="uml:Interface" name="OProfile API">
          <ownedOperation name="op_add_event">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile/OProfile%20API/op_add_event" body="Adds an event into the OProfile subsystem."/>
          </ownedOperation>
          <ownedOperation name="op_bind">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile/OProfile%20API/op_bind" body="Binds the OProfile subsystem to a processor."/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile" supplier="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile/OProfile%20API" contract="//Linux%20Kernel/Linux%20Kernel/Kernel%20Profiling%20with%20OProfile/OProfile%20API"/>
      </packagedElement>
      <packagedElement xsi:type="uml:Component" name="DTrace">
        <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DTrace" body="DTrace is a comprehensive dynamic tracing framework for the Linux Kernel that allows the user to observe kernel and user-space activity in production environments. It enables real-time performance analysis, debugging, and troubleshooting of the kernel and applications. DTrace features a powerful scripting language that allows the user to specify what to trace and how to trace it."/>
        <packagedElement xsi:type="uml:Interface" name="DTrace API">
          <ownedOperation name="dtrace_probe_register">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20API/dtrace_probe_register" body="Registers a probe within the kernel trace facility"/>
          </ownedOperation>
          <ownedOperation name="dtrace_probe_unregister">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20API/dtrace_probe_unregister" body="Unregisters a probe from the kernel trace facility"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/DTrace" supplier="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20API" contract="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20API"/>
        <packagedElement xsi:type="uml:Interface" name="DTrace User-Space Tool API">
          <ownedOperation name="dtrace_open">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20User-Space%20Tool%20API/dtrace_open" body="Opens a new DTrace consumer handle"/>
          </ownedOperation>
          <ownedOperation name="dtrace_go">
            <ownedComment annotatedElement="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20User-Space%20Tool%20API/dtrace_go" body="Starts tracing with the specified probe points and actions"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xsi:type="uml:InterfaceRealization" client="//Linux%20Kernel/Linux%20Kernel/DTrace" supplier="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20User-Space%20Tool%20API" contract="//Linux%20Kernel/Linux%20Kernel/DTrace/DTrace%20User-Space%20Tool%20API"/>
      </packagedElement>
    </packagedElement>
  </packagedElement>
</uml:Model>
